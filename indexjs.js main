const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const path = require('path');

const app = express();

// Body parser middleware
app.use(bodyParser.urlencoded({ extended: false }));
app.use(bodyParser.json());

// MongoDB connection
mongoose.connect('mongodb://localhost:27017/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.error('MongoDB connection error:', err));

// Define User schema
const UserSchema = new mongoose.Schema({
    username: String,
    email: String,
    password: String
});

// Create User model
const User = mongoose.model('User', UserSchema);

// Serve static files from the public directory
app.use(express.static(path.join(__dirname, 'public')));

// Route to serve signup form
app.get('/signup', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'signup.html'));
});

// Route to handle sign-up form submission
app.post('/signup', (req, res) => {
    const { username, email, password } = req.body;
    // Create new user
    const newUser = new User({ username, email, password });
    // Save user to database
    newUser.save()
        .then(user => {
            console.log('User signed up successfully:', user);
            res.status(201).send('User signed up successfully');
        })
        .catch(err => {
            console.error('Error signing up:', err);
            res.status(500).send('Error signing up');
        });
});

// Route to serve login form
app.get('/login', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'login.html'));
});

// Route to handle login form submission
app.post('/login', (req, res) => {
    const { username, password } = req.body;
    // Find user by username and password
    User.findOne({ username, password }).exec()
        .then(user => {
            if (!user) {
                res.status(404).send('User not found');
            } else {
                res.status(200).send('User logged in successfully');
            }
        })
        .catch(err => {
            console.error('Error logging in:', err);
            res.status(500).send('Error logging in');
        });
});

// Start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
